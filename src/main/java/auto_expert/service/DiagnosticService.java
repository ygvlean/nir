package auto_expert.service;

import auto_expert.dto.DiagnosticResult;
import auto_expert.model.*;
import auto_expert.repository.*;
import org.springframework.stereotype.Service;
import java.util.*;

@Service
public class DiagnosticService {
    private final DiagnosticDataRepository diagnosticDataRepository;
    private final RuleRepository ruleRepository;
    private final RuleDependencyRepository ruleDependencyRepository;
    private final ExplanationRepository explanationRepository;
    private final RecommendationRepository recommendationRepository;
    private final DiagnosticLogRepository diagnosticLogRepository;
    private final FactGroupMemberRepository factGroupMemberRepository;

    public DiagnosticService(
            DiagnosticDataRepository diagnosticDataRepository,
            RuleRepository ruleRepository,
            RuleDependencyRepository ruleDependencyRepository,
            ExplanationRepository explanationRepository,
            RecommendationRepository recommendationRepository,
            DiagnosticLogRepository diagnosticLogRepository,
            FactGroupMemberRepository factGroupMemberRepository) {
        this.diagnosticDataRepository = diagnosticDataRepository;
        this.ruleRepository = ruleRepository;
        this.ruleDependencyRepository = ruleDependencyRepository;
        this.explanationRepository = explanationRepository;
        this.recommendationRepository = recommendationRepository;
        this.diagnosticLogRepository = diagnosticLogRepository;
        this.factGroupMemberRepository = factGroupMemberRepository;
    }

    public DiagnosticResult diagnoseVehicle(String vehicleId) {
        List<DiagnosticData> facts = diagnosticDataRepository.findByVehicleId(vehicleId);
        Set<Rule> triggeredRules = new HashSet<>();

        // 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–∫—Ç—ã –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º
        for (DiagnosticData fact : facts) {
            List<Rule> rules = ruleRepository.findByParameterName(fact.getParameterName());
            for (Rule rule : rules) {
                if (evaluateCondition(fact.getParameterValue(), rule)) {
                    triggeredRules.add(rule);
                }
            }
        }

        // 2Ô∏è‚É£ –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º—ã—Ö —Å–∏—Å—Ç–µ–º –î–û –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        Set<String> diagnosedSystems = new HashSet<>();
        for (Rule rule : triggeredRules) {
            List<FactGroupMember> relatedGroups = factGroupMemberRepository.findByParameterName(rule.getParameterName());
            for (FactGroupMember group : relatedGroups) {
                diagnosedSystems.add(group.getFactGroup().getName());
            }
        }

        // 3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É –ø—Ä–∞–≤–∏–ª–∞–º–∏, –Ω–æ –¢–û–õ–¨–ö–û –≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö
        Set<Rule> finalTriggeredRules = new HashSet<>(triggeredRules);
        Queue<Rule> queue = new LinkedList<>(triggeredRules);
        while (!queue.isEmpty()) {
            Rule parentRule = queue.poll();
            List<RuleDependency> dependencies = ruleDependencyRepository.findByParentRuleId(parentRule.getId());
            for (RuleDependency dependency : dependencies) {
                Rule childRule = dependency.getChildRule();

                // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø—Ä–∞–≤–∏–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º—ã–º —Å–∏—Å—Ç–µ–º–∞–º
                List<FactGroupMember> childGroups = factGroupMemberRepository.findByParameterName(childRule.getParameterName());
                boolean isRelevant = childGroups.stream().anyMatch(group -> diagnosedSystems.contains(group.getFactGroup().getName()));

                if (isRelevant && !finalTriggeredRules.contains(childRule)) {
                    finalTriggeredRules.add(childRule);
                    queue.add(childRule);
                }
            }
        }

        // 4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —ç—Ç–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö
        Set<Rule> missingDataRules = new HashSet<>();
        for (String system : diagnosedSystems) {
            List<FactGroupMember> groupMembers = factGroupMemberRepository.findAll(); // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏—Å—Ç–µ–º—ã

            boolean hasEnoughData = facts.stream()
                    .anyMatch(f -> groupMembers.stream()
                            .anyMatch(gm -> gm.getParameterName().equals(f.getParameterName()) && diagnosedSystems.contains(system)));

            if (!hasEnoughData) {
                missingDataRules.addAll(
                        ruleRepository.findAll().stream()
                                .filter(rule -> groupMembers.stream()
                                        .anyMatch(gm -> gm.getParameterName().equals(rule.getParameterName()) && diagnosedSystems.contains(system)))
                                .toList()
                );
            }
        }

        // 5Ô∏è‚É£ –°–æ–±–∏—Ä–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¢–û–õ–¨–ö–û –∏–∑ —ç—Ç–∏—Ö —Å–∏—Å—Ç–µ–º
        List<String> missingParameters = missingDataRules.stream()
                .map(Rule::getParameterName)
                .distinct()
                .toList();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –¥–∏–∞–≥–Ω–æ–∑ —Ç–æ–ª—å–∫–æ —Å–∏–º–ø—Ç–æ–º–æ–º –±–µ–∑ –≤—ã—è–≤–ª–µ–Ω–Ω–æ–π –ø—Ä–∏—á–∏–Ω—ã
        Set<Rule> missingCauseRules = new HashSet<>();
        for (Rule rule : finalTriggeredRules) {
            List<RuleDependency> dependencies = ruleDependencyRepository.findByParentRuleId(rule.getId());
            for (RuleDependency dependency : dependencies) {
                Rule childRule = dependency.getChildRule();
                boolean hasFact = facts.stream()
                        .anyMatch(f -> f.getParameterName().equals(childRule.getParameterName()));

                if (!hasFact) {
                    missingCauseRules.add(childRule);
                }
            }
        }

// üî• –¢–µ–ø–µ—Ä—å —Ñ–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¢–û–õ–¨–ö–û –∏–∑ —Å–∏—Å—Ç–µ–º, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É—é—Ç—Å—è
        List<String> missingCauseParameters = missingCauseRules.stream()
                .filter(rule -> {
                    List<FactGroupMember> groups = factGroupMemberRepository.findByParameterName(rule.getParameterName());
                    return groups.stream().anyMatch(group -> diagnosedSystems.contains(group.getFactGroup().getName())); // –¢–æ–ª—å–∫–æ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã!
                })
                .map(Rule::getParameterName)
                .distinct()
                .toList();


        // 7Ô∏è‚É£ –ï—Å–ª–∏ –¥–∏–∞–≥–Ω–æ–∑ ‚Äî —ç—Ç–æ —Ç–æ–ª—å–∫–æ —Å–∏–º–ø—Ç–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–Ω–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å–ª–∞"), –Ω–æ –ø—Ä–∏—á–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if (!missingCauseParameters.isEmpty()) {
            return new DiagnosticResult(
                    List.of("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –¥–∏–∞–≥–Ω–æ–∑–∞"),
                    List.of("–î–ª—è —Ç–æ—á–Ω–æ–≥–æ –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö."),
                    List.of("–î–æ–±–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º: " + String.join(", ", missingCauseParameters))
            );
        }

        // 8Ô∏è‚É£ –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏–∞–≥–Ω–æ–∑–æ–≤, —Ñ–∏–ª—å—Ç—Ä—É—è –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        List<String> diagnoses = new ArrayList<>();
        List<String> explanations = new ArrayList<>();
        List<String> recommendations = new ArrayList<>();

        for (Rule rule : finalTriggeredRules) {
            List<FactGroupMember> groups = factGroupMemberRepository.findByParameterName(rule.getParameterName());
            boolean isRelevant = groups.stream().anyMatch(group -> diagnosedSystems.contains(group.getFactGroup().getName()));

            if (isRelevant) {
                diagnoses.add(rule.getAction());

                explanationRepository.findByRuleId(rule.getId()).ifPresent(explanation ->
                        explanations.add(explanation.getExplanation()));

                recommendationRepository.findByDiagnosis(rule.getAction()).ifPresent(recommendation ->
                        recommendations.add(recommendation.getRecommendation()));
            }
        }

        // 9Ô∏è‚É£ –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –∞–≤—Ç–æ –∏—Å–ø—Ä–∞–≤–Ω–æ
        if (diagnoses.isEmpty()) {
            diagnoses.add("–ê–≤—Ç–æ–º–æ–±–∏–ª—å –∏—Å–ø—Ä–∞–≤–µ–Ω");
            explanations.add("–í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö.");
        }

        // üîü –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        DiagnosticLog log = new DiagnosticLog();
        log.setVehicleId(vehicleId);
        log.setDiagnosis(String.join("; ", diagnoses));
        log.setExplanation(String.join("; ", explanations));
        diagnosticLogRepository.save(log);

        return new DiagnosticResult(diagnoses, explanations, recommendations);
    }


    private boolean evaluateCondition(double factValue, Rule rule) {
        switch (rule.getComparisonOperator()) {
            case ">": return factValue > rule.getThresholdValue();
            case "<": return factValue < rule.getThresholdValue();
            case "=": return factValue == rule.getThresholdValue();
            case "!=": return factValue != rule.getThresholdValue();
            default: throw new IllegalArgumentException("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä: " + rule.getComparisonOperator());
        }
    }
}


